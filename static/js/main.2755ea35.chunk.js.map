{"version":3,"sources":["Title.js","DadJoke.js","Bikes.js","App.js","serviceWorker.js","index.js"],"names":["Title","console","log","DadJoke","useState","joke","setJoke","useEffect","fetch","then","response","json","data","children","className","title","selftext","service","createEnturService","clientName","Bikes","bikeStations","setBikeStations","getBikeRentalStationsByPosition","latitude","longitude","map","station","key","id","Station","props","name","bikesAvailable","spacesAvailable","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qOAOeA,G,MALD,WAEZ,OADAC,QAAQC,IAAI,qBACL,6C,OCkBMC,EApBC,WAAO,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,KAYpB,OATAC,qBAAU,WAERC,MAAM,4DACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUL,EAAQK,EAAKC,KAAKC,SAAS,GAAGD,WAC/C,IAKD,yBAAKE,UAAU,WACb,2BAAIT,EAAKU,OACT,2BAAIV,EAAKW,Y,gBCdTC,E,MAAUC,GAAmB,CACjCC,WAAY,sBA4BCC,EAzBD,WAAO,IAAD,EACsBhB,mBAAS,IAD/B,mBACXiB,EADW,KACGC,EADH,KAgBlB,OAbAf,qBAAU,WACRU,EACGM,gCACC,CACEC,SAAU,UACVC,UAAW,WAEb,KAEDhB,MAAK,SAACG,GAAD,OAAUU,EAAgBV,MAClCX,QAAQC,IAAI,cACX,IAGD,yBAAKY,UAAU,SACZO,EAAaK,KAAI,SAACC,GAAD,OAChB,kBAAC,EAAD,CAASC,IAAKD,EAAQE,GAAIF,QAASA,SAQrCG,EAAU,SAACC,GAAW,IAAD,EACyBA,EAAMJ,QAAhDK,EADiB,EACjBA,KAAMC,EADW,EACXA,eAAgBC,EADL,EACKA,gBAG9B,OADAjC,QAAQC,IAAI8B,EAAMC,EAAgBC,GAEhC,yBAAKpB,UAAU,WACZkB,EADH,MACYC,ICxBDE,MAVf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.2755ea35.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Title = () => {\r\n  console.log(\"tittel lastet inn\");\r\n  return <h1>Inforskjerm</h1>;\r\n};\r\n\r\nexport default Title;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst DadJoke = () => {\r\n  const [joke, setJoke] = useState({});\r\n\r\n  useEffect(() => {\r\n    //    console.log(\"component rendered\");\r\n    fetch(\"https://www.reddit.com/r/dadjokes/top.json?t=day&limit=1\")\r\n      .then((response) => response.json())\r\n      .then((json) => setJoke(json.data.children[0].data));\r\n  }, []);\r\n\r\n  //  console.log(joke);\r\n\r\n  return (\r\n    <div className=\"DadJoke\">\r\n      <p>{joke.title}</p>\r\n      <p>{joke.selftext}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DadJoke;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport createEnturService from \"@entur/sdk\";\r\n\r\nconst service = createEnturService({\r\n  clientName: \"furnes-infoskjerm\",\r\n});\r\n\r\nconst Bikes = () => {\r\n  const [bikeStations, setBikeStations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    service\r\n      .getBikeRentalStationsByPosition(\r\n        {\r\n          latitude: 63.428311,\r\n          longitude: 10.392514,\r\n        },\r\n        230\r\n      )\r\n      .then((data) => setBikeStations(data));\r\n    console.log(\"Fungerer\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Bikes\">\r\n      {bikeStations.map((station) => (\r\n        <Station key={station.id} station={station} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bikes;\r\n\r\nconst Station = (props) => {\r\n  const { name, bikesAvailable, spacesAvailable } = props.station;\r\n\r\n  console.log(name, bikesAvailable, spacesAvailable);\r\n  return (\r\n    <div className=\"station\">\r\n      {name} - {bikesAvailable}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport Title from \"./Title\";\nimport DadJoke from \"./DadJoke\";\nimport \"./App.css\";\nimport Bikes from \"./Bikes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title />\n      <DadJoke />\n      <Bikes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}